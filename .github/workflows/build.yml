name: Build

on:
  workflow_call:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'package.json'
      - 'src-tauri/**/*'
      - 'src/**/*'
      - 'updater/**/*'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'package.json'
      - 'src-tauri/**/*'
      - 'src/**/*'
      - 'updater/**/*'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0

jobs:
  build:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          toolchain: nightly

      - uses: pnpm/action-setup@v3.0.0
        with:
          version: latest

      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Setup node
        uses: actions/setup-node@v4.0.1
        with:
          node-version: latest

      - uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            updater/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: (Linux) Install dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libsoup-3.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \ 
            cmake
          echo "PKG_CONFIG_PATH=$(dirname $(find /usr -name 'libsoup-3.0.pc'))" >> $GITHUB_ENV


      - name: (MacOS) Install MacOS universal target
        if: matrix.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin

      - name: Build updater
        run: pnpm build:updater
        env:
          RUSTFLAGS: -Awarnings

      - name: Install dependencies
        run: pnpm install && pnpm shupdate

      - name: Build
        # Include seperate targets for MacOS since it needs to build for both aarch64 and x86_64
        run: pnpm tauri build ${{ matrix.platform == 'macos-latest' && '--target aarch64-apple-darwin && pnpm tauri build --target x86_64-apple-darwin' || '' }}
        env:
          RUSTFLAGS: -Awarnings
      
      # Make empty folders for plugins and themes
      - name: (Windows) Create empty folders for plugins
        if: matrix.platform == 'windows-latest'
        continue-on-error: true
        run: mkdir src-tauri/target/release/themes && mkdir src-tauri/target/release/plugins

      # Empty folders, unix edition
      - name: (Unix) Create empty folders for plugins and themes
        if: matrix.platform != 'windows-latest'
        run: mkdir -p src-tauri/target/release/plugins && mkdir -p src-tauri/target/release/themes

      - name: Create empty config.json
        run: cd src-tauri/target/release && echo {} > config.json

      # paths:
      # Windows:
      # - src-tauri/target/release/Dorion.exe|config.json|plugins|themes|injection|icons
      # Ubuntu:
      # - src-tauri/target/release/dorion|config.json|plugins|themes|injection|icons
      # MacOS:
      # - src-tauri/target/[arch]/release/bundle/macos/Dorion.app

      # src-tauri/target/release/updater.exe
      - name: (Windows) Compress build
        if: matrix.platform == 'windows-latest'
        run: 7z a -tzip -mx9 Dorion.zip
          src-tauri/target/release/Dorion.exe
          src-tauri/target/release/config.json
          src-tauri/target/release/plugins/
          src-tauri/target/release/themes/
          src-tauri/target/release/icons/
          src-tauri/target/release/injection/

      - name: (Linux) Compress build
        if: matrix.platform == 'ubuntu-latest'
        run: cd src-tauri/target/release && tar -czvf dorion.tar.gz dorion config.json updater ./plugins ./themes ./injection ./icons

      # Windows portable
      - name: (Windows) Upload portable
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_win64_portable
          path: Dorion.zip

      # Windows MSI
      - name: (Windows) Upload .msi
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_win64_msi
          path: src-tauri/target/release/bundle/msi/*.msi

      # Ubuntu portable
      - name: (Linux) Upload portable
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_amd64_portable
          path: src-tauri/target/release/dorion.tar.gz

      # Ubuntu deb
      - name: (Linux) Upload .deb
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_amd64_deb
          path: src-tauri/target/release/bundle/deb/*.deb

      - name: (Linux) Upload .appimage
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_amd64_appimage
          path: src-tauri/target/release/bundle/appimage/*.AppImage

      - name: (MacOS) Upload x86 .dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: dorion_macos_x86-64_dmg
          path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg

      - name: (MacOS) Upload ARM .dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion_macos_arm_dmg
          path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
